---
layout: post
title: "[Rails] 所谓MVC"
date: 2015-01-19 14:55:27 +0800
comments: true
categories: 程序开发
tag:
- MVC
- rails
- 学习报告
---
使用`MVC`的Web开发框架有很多，比如`PHP`的`Zend`，`Python`的`Django`和`Golang`的`Beego`。这篇文章主要介绍一下`MVC`的基本概念。

##何为MVC

为了明确一个`Web Application`中各个部分的职责，我们人为规定三个层级：控制器（Controller），模型（Model）和视图（View），这是一种设计上的解耦。

为了直观地解释这三个层级的概念，我们假设这它们分别对应代码层面的三个类：

```ruby
class FooModel
end
```
```ruby
class FooView
end
```
```ruby
class FooController
end
```
#### 调度器（Controller） -- 完整的request生命周期
我们可以简单的理解为：用户在浏览器上输入的每个合法的URL，都将被映射到Controller类上的一个实例方法。该实例方法是一次`request`的**入口**，负责调度程序的各个部分，返回`web response`给浏览器。

所谓入口，指的是一次访问的<b>整个生命周期，都随着这个方法的开始而开始，结束而结束。</b>从这个角度来看，我们完全可以不使用模型和视图，就能完成一个Web应用。

```ruby
# Rails中URL和实例方法的映射关系在routes.rb中设置
# 比如 '/index' => Controller#index 可以规定:
#   当用户在browser中输入"http://yoursiteurl.com/index"时
#   执行Controller类的index方法

class FooController
  def index
    @counter = @counter ? @counter + 1 : 0 

    render html: "<p>你是该网站的第#{@counter}名访客</p>".html_safe
  end
end
```


####模型（Model） -- 数据持久化存储
我们可以看到，在一次request结束后，Controller实例方法中分配的内存会被回收，无法再次被使用。为了能够将Controller处理过程中的数据在今后继续使用，我们需要对这部分数据进行持久化存储。

所以我们期望有一个类，他的所有变量都永远不会消失。同时，我们还希望它可以提取对数据操作的逻辑（如例中的counter计数），方便今后复用。我们将它叫做模型（Model），至于它如何做到所有的变量永不消失，我们回头再讲。

```ruby
class FooModel
  # ...
  def counter
    @counter = @counter ? @counter + 1 : 0 
    save # 持久化存储，具体实现细节在后面的文章会讲

    @counter
  end
  # ...
end

class FooController
  def index
    model = FooModel.new
    render html: "<p>你是该网站的第#{model.counter}名访客</p>".html_safe
  end
end
```

#### 视图（View） -- 页面展示
在上面的两个例子中都出现了类似`render html: xxx`之类的代码。如果我们不想在Controller中出现HTML代码，可以把它放在View层。

```ruby
class FooModel
  # ...
  def counter
    @counter = @counter ? @counter + 1 : 0 
    save # 持久化存储，具体实现细节在后面的文章会讲

    @counter
  end
  # ...
end

class FooView
  def index(counter)
    "<p>你是该网站的第#{counter}名访客</p>"
  end
end

class FooController
  def index
    model = FooModel.new
    view  = FooView.new

    render html: view.index(model.counter).html_safe
  end
end
```

### 小节
*1. 调度器（Controller）对于一个程序来说是必须存在的，它负责得到输入，返回输出*
*2. 我们用模型（Model）这个概念来**抽象**调度器（Controller）中，关于**数据存取、逻辑运算**相关的代码，以便独立地维护它们。*
*3. 我们用视图（View）这个概念来**抽象**调度器（Controller）中，关于**数据展示格式**相关的代码，以便独立地维护它们。*
